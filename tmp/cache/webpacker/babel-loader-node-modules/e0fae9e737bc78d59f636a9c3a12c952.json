{"ast":null,"code":"import consumer from \"./consumer\"; // document.addEventListener('turbolinks:load', () => {\n//   const room_element = document.getElementById('room-id');\n//   const room_id = room_element.getAttribute('data-room-id');\n//   console.log(consumer.subscriptions)\n//   consumer.subscriptions.subscriptions.forEach((subscription) => {\n//     consumer.subscriptions.remove(subscription)\n//   })\n\nconsumer.subscriptions.create({\n  channel: \"RoomChannel\",\n  room_id: 1\n}, {\n  connected: function connected() {\n    console.log(\"connected to....\"); // Called when the subscription is ready for use on the server\n  },\n  disconnected: function disconnected() {// Called when the subscription has been terminated by the server\n  },\n  received: function received(data) {\n    console.log(data);\n    var user_element = document.getElementById('user-id');\n    var user_id = Number(user_element.getAttribute('data-user-id'));\n    var html;\n\n    if (user_id === data.message.user_id) {\n      html = data.mine;\n    } else {\n      html = data.theirs;\n    }\n\n    var messageContainer = document.getElementById('messages');\n    messageContainer.innerHTML = messageContainer.innerHTML + html;\n  }\n}); // })","map":{"version":3,"sources":["/home/yanthraa/messenger-app/app/javascript/channels/room_channel.js"],"names":["consumer","subscriptions","create","channel","room_id","connected","console","log","disconnected","received","data","user_element","document","getElementById","user_id","Number","getAttribute","html","message","mine","theirs","messageContainer","innerHTML"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB,C,CAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAEEA,QAAQ,CAACC,aAAT,CAAuBC,MAAvB,CAA8B;AAAEC,EAAAA,OAAO,EAAE,aAAX;AAA0BC,EAAAA,OAAO,EAAE;AAAnC,CAA9B,EAAsE;AACpEC,EAAAA,SADoE,uBACxD;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EADU,CAEV;AACD,GAJmE;AAMpEC,EAAAA,YANoE,0BAMrD,CACb;AACD,GARmE;AAUpEC,EAAAA,QAVoE,oBAU3DC,IAV2D,EAUrD;AACbJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AACA,QAAMC,YAAY,GAAGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAArB;AACA,QAAMC,OAAO,GAAGC,MAAM,CAACJ,YAAY,CAACK,YAAb,CAA0B,cAA1B,CAAD,CAAtB;AAEA,QAAIC,IAAJ;;AAEA,QAAIH,OAAO,KAAKJ,IAAI,CAACQ,OAAL,CAAaJ,OAA7B,EAAsC;AACpCG,MAAAA,IAAI,GAAGP,IAAI,CAACS,IAAZ;AACD,KAFD,MAEO;AACLF,MAAAA,IAAI,GAAGP,IAAI,CAACU,MAAZ;AACD;;AAED,QAAMC,gBAAgB,GAAGT,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAzB;AACAQ,IAAAA,gBAAgB,CAACC,SAAjB,GAA6BD,gBAAgB,CAACC,SAAjB,GAA6BL,IAA1D;AACD;AAzBmE,CAAtE,E,CA2BF","sourcesContent":["import consumer from \"./consumer\"\n\n// document.addEventListener('turbolinks:load', () => {\n//   const room_element = document.getElementById('room-id');\n//   const room_id = room_element.getAttribute('data-room-id');\n\n//   console.log(consumer.subscriptions)\n\n//   consumer.subscriptions.subscriptions.forEach((subscription) => {\n//     consumer.subscriptions.remove(subscription)\n//   })\n\n  consumer.subscriptions.create({ channel: \"RoomChannel\", room_id: 1 }, {\n    connected() {\n      console.log(\"connected to....\")\n      // Called when the subscription is ready for use on the server\n    },\n\n    disconnected() {\n      // Called when the subscription has been terminated by the server\n    },\n\n    received(data) {\n      console.log(data)\n      const user_element = document.getElementById('user-id');\n      const user_id = Number(user_element.getAttribute('data-user-id'));\n\n      let html;\n\n      if (user_id === data.message.user_id) {\n        html = data.mine\n      } else {\n        html = data.theirs\n      }\n\n      const messageContainer = document.getElementById('messages')\n      messageContainer.innerHTML = messageContainer.innerHTML + html\n    }\n  });\n// })\n"]},"metadata":{},"sourceType":"module"}